package golf;
public class Club {
    private int totalPalos, totalPelotas;
    private volatile int palosDisponibles, pelotasDisponibles;
    
    public Club(int palos, int pelotas){
        this.totalPalos = palos;
        this.totalPelotas = pelotas;
        this.palosDisponibles = palos;
        this.pelotasDisponibles = pelotas;
    }
    
    public synchronized boolean reserva(int palos, int pelotas){
        while(palosDisponibles < palos || pelotasDisponibles < pelotas){
            try {
                wait();
            } catch (InterruptedException e){}
        }
        palosDisponibles -= palos;
        pelotasDisponibles -= pelotas;
        Simulador.log("Pelotas disponibles: " + pelotasDisponibles + ". Palos disponibles: " + palosDisponibles);
        notifyAll();
        return true;
    }
    
    public synchronized boolean devuelve(int palos, int pelotas){
        while(palosDisponibles + palos > totalPalos ||
                pelotasDisponibles + pelotas > totalPelotas){
            
            try {
                wait();
            }  catch(InterruptedException e){}       
        }
        palosDisponibles += palos;
        pelotasDisponibles += pelotas;
        Simulador.log("Pelotas disponibles: " + pelotasDisponibles + ". Palos disponibles: " + palosDisponibles);
        notifyAll();
        return true;
    }
}


package golf;
public class Jugador extends Thread{
    
    enum TipoJugador{experimentado, novato};
    private static java.util.Random rand= new java.util.Random();
    
    private int id;
    private TipoJugador tipo;
    private Club club;
    private int repeticiones;
    
    public Jugador(int id, TipoJugador tipo, Club club, int repeticiones){
        this.id = id;
        this.tipo = tipo;
        this.club = club;
        this.repeticiones = repeticiones;
    }
    
    public void run(){
        int pelotas, palos;
        String c;
        for(int i = 0; i < repeticiones; i++){
            if(tipo == TipoJugador.novato){
                pelotas = rand.nextInt(4) + 2;
                palos = 2;
                c = "n";
            } else {
                pelotas = 2;
                palos = rand.nextInt(4) + 2;
                c = "e";
            }
            Simulador.log(id + c + "["+ pelotas + "," + palos + "]" + " reserva" );
            club.reserva(palos, pelotas);
            Simulador.log(id + c + "["+ pelotas + "," + palos + "]" + " jugar" );
            try{
                Thread.sleep(Simulador.tiempoJuego());
            } catch(InterruptedException e){}
            club.devuelve(palos, pelotas);
            Simulador.log(id + c + "["+ pelotas + "," + palos + "]" + " devolver" );
            try{
                Thread.sleep(Simulador.tiempoDescanso());
            } catch(InterruptedException e){}
        }
    }
}

package golf;
public class Simulador {
    private static long tini=System.currentTimeMillis();
    private static java.util.Random rand= new java.util.Random();
    
    public static void main(String[] args) {
        Club club = new Club(20,20);
        Jugador[] jugadores = new Jugador[14];
        for(int i = 0; i < 7 ; i++){
            jugadores[i] = new Jugador(i, Jugador.TipoJugador.novato, club, 25);
        }
        
        for(int i = 7; i < 14 ; i++){
            jugadores[i] = new Jugador(i, Jugador.TipoJugador.experimentado, club, 25);
        }
        
        for(int i = 0; i < 14; i++){
            jugadores[i].start();
        }
        
        try {
            for(int i = 0; i < 14; i++){
                jugadores[i].join();
            }
        } catch(InterruptedException e){}
        
        // Complete aquí la simulación
        log("Termina Simulador.main");
    }
    
    // Muestra información en la pantalla
    public static void log(String message) {
            long cur=System.currentTimeMillis();
            String t= String.format("%6.1fs      \033[1;33m%s\033[m\n", (cur-tini)/1000.0, message);
            System.out.print(t);
    }
    
    // Devuelve tiempo de juego en milisegundos
    public static int tiempoJuego() {
        return rand.nextInt(1000);
    }
    
    // Devuelve tiempo de descanso en milisegundos
    public static int tiempoDescanso() {
        return rand.nextInt(1000);
    }
}
